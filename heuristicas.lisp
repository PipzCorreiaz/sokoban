;soma as distancias de cada caixa em linha recta ate ao destino mais perto
(defun h1 (estado)
  (let ((caixas (second estado))
        (destinos (copy-list (mapa-sokoban-destinos (first estado))))
        (dist-min 1000)
        (index-min nil)
        (index 0)
        (res 0))
    (dolist (caixa caixas)
      (dolist (destino destinos)
        (let ((dist (sqrt (+ (expt (- (first caixa)
                                      (first destino)) 2)
                             (expt (- (second caixa)
                                      (second destino)) 2)))))
          (when (< dist dist-min)
            (setf dist-min dist)
            (setf index-min index))
          (setf index (1+ index))))
      (setf res (+ res dist-min))
      (setf destinos (remove-nth destinos index-min))
      (setf dist-min 1000)
      (setf index-min nil)
      (setf index 0))
    res))


;soma as distancias de cada caixa dadas pelo encontra-caminho ate ao destino mais perto
(defun h2 (estado)
  (let ((caixas (second estado))
        (destinos (copy-list (mapa-sokoban-destinos (first estado))))
        (dist-min 1000)
        (index-min nil)
        (index 0)
        (res 0))
    (dolist (caixa caixas)
      (dolist (destino destinos)
        (let ((dist (length (encontra-caminho (first estado) caixas (first caixa) (second caixa) (first destino) (second destino)))))
          (when (= dist 0)
            (setf dist 999))
          (when (< dist dist-min)
            (setf dist-min dist)
            (setf index-min index))
          (setf index (1+ index))))
      (setf res (+ res dist-min))
      (setf destinos (remove-nth destinos index-min))
      (setf dist-min 1000)
      (setf index-min nil)
      (setf index 0))
    res))


;distancia mais curta da caixa dada pelo encontra-caminho ate ao destino mais perto
(defun h3 (estado)
  (let ((caixas (second estado))
        (destinos (mapa-sokoban-destinos (first estado)))
        (dist-min 1000))
    (dolist (caixa caixas)
      (dolist (destino destinos)
        (let ((dist (length (encontra-caminho (first estado) caixas (first caixa) (second caixa) (first destino) (second destino)))))
          (when (= dist 0)
            (setf dist 999))
          (when (< dist dist-min)
            (setf dist-min dist)))))
    dist-min))


;numero de caixas acessiveis pelo homem com caminho ate ao destino
(defun h4 (estado)
  (let* ((caixas (second estado))
         (destinos (mapa-sokoban-destinos (first estado)))
         (homem (first (third estado)))
         (mapa (mapa-sokoban-mapa (first estado)))
         (mapa-aux (mapa-sokoban-mapa-aux (first estado)))
         (ocupadas (coloca-caixotes mapa-aux caixas))
         (contador 0))
    (dolist (caixa caixas)
      (when (not (member caixa destinos :test #'equalp))
        (dolist (adjacente (jogadas-validas3 mapa ocupadas (first caixa) (second caixa)))
          (when (ha-caminho (first estado) caixas (first homem) (second homem) (first adjacente) (second adjacente))
            (block encontra-destinos
                   (dolist (destino destinos)
                     (when (ha-caminho (first estado) caixas (first caixa) (second caixa) (first destino) (second destino))
                       (return-from encontra-destinos (incf contador)))))))))
    (- 1000 contador)))


;conta as adjacentes das caixas
(defun h5 (estado)
  (let* ((caixas (second estado))
         (mapa (mapa-sokoban-mapa (first estado)))
         (ocupadas (coloca-caixotes (mapa-sokoban-mapa-aux (first estado)) caixas))
         (num-caixas (length caixas))
         (res 0))
    (dolist (caixa caixas)
      (setf res (+ res (length (jogadas-validas3 mapa ocupadas (first caixa) (second caixa))))))
    (- (* 4 num-caixas) res)))


;numero de caixas que tem caminho ate um destino
(defun h6 (estado)
  (let ((caixas (second estado))
        (destinos (mapa-sokoban-destinos (first estado)))
        (res 0))
    (dolist (caixa caixas)
      (block encontra-dest-acessivel
             (dolist (destino destinos)
               (when (ha-caminho (first estado) caixas (first caixa) (second caixa) (first destino) (second destino))
                 (incf res)
                 (return-from encontra-dest-acessivel)))))
    (- (length caixas) res)))
          
          
;numero de caixas acessiveis pelo homem
(defun h7 (estado)
  (let ((caixas (second estado))
        (homem (first (third estado)))
        (res 0))
    (dolist (caixa caixas)
      (when (ha-caminho (first estado) caixas (first homem) (second homem) (first caixa) (second caixa))
        (incf res)))
    (- (length caixas) res)))